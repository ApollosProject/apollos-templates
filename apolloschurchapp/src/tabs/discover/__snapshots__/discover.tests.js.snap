// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Discover tab component Should retrieve the Content Channel Feeds 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={false}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    style={
      Object {
        "backgroundColor": "#eee",
        "flex": 1,
        "flexDirection": "column-reverse",
        "overflow": "hidden",
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        pointerEvents="auto"
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "opacity": 1,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "transform": Array [
              Object {
                "translateX": 0,
              },
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          style={
            Object {
              "backgroundColor": "#fff",
              "flex": 1,
            }
          }
        >
          <BVLinearGradient
            colors={
              Array [
                4294967295,
                4294506484,
              ]
            }
            endPoint={
              Object {
                "x": 0.5,
                "y": 1,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0.5,
                "y": 0,
              }
            }
            style={
              Object {
                "flex": 1,
                "height": "100%",
              }
            }
          >
            <View
              onLayout={[Function]}
              pointerEvents="box-none"
              style={
                Object {
                  "paddingBottom": 0,
                  "paddingLeft": 0,
                  "paddingRight": 0,
                  "paddingTop": 20,
                }
              }
            >
              <RCTScrollView
                data={Array []}
                disableVirtualization={false}
                getItem={[Function]}
                getItemCount={[Function]}
                horizontal={false}
                initialNumToRender={10}
                keyExtractor={[Function]}
                loading={true}
                maxToRenderPerBatch={10}
                navigation={
                  Object {
                    "actions": Object {
                      "dismiss": [Function],
                      "goBack": [Function],
                      "navigate": [Function],
                      "pop": [Function],
                      "popToTop": [Function],
                      "push": [Function],
                      "replace": [Function],
                      "reset": [Function],
                      "setParams": [Function],
                    },
                    "addListener": [Function],
                    "dangerouslyGetParent": [Function],
                    "dismiss": [Function],
                    "dispatch": [Function],
                    "emit": [Function],
                    "getChildNavigation": [Function],
                    "getParam": [Function],
                    "getScreenProps": [Function],
                    "goBack": [Function],
                    "isFirstRouteInParent": [Function],
                    "isFocused": [Function],
                    "navigate": [Function],
                    "pop": [Function],
                    "popToTop": [Function],
                    "push": [Function],
                    "replace": [Function],
                    "reset": [Function],
                    "router": undefined,
                    "setParams": [Function],
                    "state": Object {
                      "key": "id-1602785462428-0",
                      "routeName": "Discover",
                    },
                  }
                }
                numColumns={1}
                onContentSizeChange={[Function]}
                onEndReachedThreshold={0.7}
                onLayout={[Function]}
                onMomentumScrollEnd={[Function]}
                onRefresh={[Function]}
                onScroll={[Function]}
                onScrollBeginDrag={[Function]}
                onScrollEndDrag={[Function]}
                openUrl={[Function]}
                refreshControl={
                  <RefreshControlMock
                    onRefresh={[Function]}
                    refreshing={false}
                  />
                }
                refreshing={false}
                removeClippedSubviews={false}
                renderItem={[Function]}
                scrollEventThrottle={50}
                stickyHeaderIndices={Array []}
                updateCellsBatchingPeriod={50}
                viewabilityConfigCallbackPairs={Array []}
                windowSize={21}
              >
                <RCTRefreshControl />
                <View />
              </RCTScrollView>
            </View>
          </BVLinearGradient>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#fff",
            "transform": Array [
              Object {
                "translateX": -750,
              },
            ],
          }
        }
      >
        <RCTSafeAreaView
          emulateUnlessSupported={true}
          forceInset={
            Object {
              "bottom": "never",
              "horizontal": "always",
              "top": "always",
            }
          }
          style={
            Array [
              Object {
                "backgroundColor": "#fff",
                "borderBottomColor": "#a7a7aa",
                "borderBottomWidth": 0.5,
              },
              Object {
                "height": 44,
              },
              Object {},
            ]
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          />
        </RCTSafeAreaView>
      </View>
    </View>
  </View>
</View>
`;
