// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Discover tab component Should retrieve the Content Channel Feeds 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={false}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    style={
      Object {
        "backgroundColor": "#eee",
        "flex": 1,
        "flexDirection": "column-reverse",
        "overflow": "hidden",
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        pointerEvents="auto"
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "opacity": 1,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "transform": Array [
              Object {
                "translateX": 0,
              },
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          style={
            Object {
              "backgroundColor": "#fff",
              "flex": 1,
            }
          }
        >
          <BVLinearGradient
            colors={
              Array [
                4294967295,
                4294506484,
              ]
            }
            endPoint={
              Object {
                "x": 0.5,
                "y": 1,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0.5,
                "y": 0,
              }
            }
            style={
              Object {
                "flex": 1,
                "height": "100%",
              }
            }
          >
            <View
              onLayout={[Function]}
              pointerEvents="box-none"
              style={
                Object {
                  "paddingBottom": 0,
                  "paddingLeft": 0,
                  "paddingRight": 0,
                  "paddingTop": 20,
                }
              }
            >
              <RCTScrollView
                ListEmptyComponent={
                  <Err
                    error={
                      [Error: Network error: No more mocked responses for the query: query getFeedFeatures {
  userFeedFeatures {
    ...FeedFeaturesFragment
    __typename
  }
}

fragment FeedFeaturesFragment on Feature {
  id
  __typename
  ... on VerticalCardListFeature {
    isFeatured
    title
    subtitle
    __typename
  }
  ... on HorizontalCardListFeature {
    title
    subtitle
    __typename
  }
  ... on ActionListFeature {
    title
    subtitle
    __typename
  }
  ... on HeroListFeature {
    title
    subtitle
    __typename
  }
  ... on PrayerListFeature {
    title
    subtitle
    isCard
    __typename
  }
}
, variables: {}]
                    }
                    message="Oh no! We're sorry! We logged your error and notified our team directly. In the mean time, please try again."
                    showErrorMessage={false}
                  />
                }
                data={Array []}
                disableVirtualization={false}
                getItem={[Function]}
                getItemCount={[Function]}
                horizontal={false}
                initialNumToRender={10}
                keyExtractor={[Function]}
                loading={false}
                maxToRenderPerBatch={10}
                navigation={
                  Object {
                    "actions": Object {
                      "dismiss": [Function],
                      "goBack": [Function],
                      "navigate": [Function],
                      "pop": [Function],
                      "popToTop": [Function],
                      "push": [Function],
                      "replace": [Function],
                      "reset": [Function],
                      "setParams": [Function],
                    },
                    "addListener": [Function],
                    "dangerouslyGetParent": [Function],
                    "dismiss": [Function],
                    "dispatch": [Function],
                    "emit": [Function],
                    "getChildNavigation": [Function],
                    "getParam": [Function],
                    "getScreenProps": [Function],
                    "goBack": [Function],
                    "isFirstRouteInParent": [Function],
                    "isFocused": [Function],
                    "navigate": [Function],
                    "pop": [Function],
                    "popToTop": [Function],
                    "push": [Function],
                    "replace": [Function],
                    "reset": [Function],
                    "router": undefined,
                    "setParams": [Function],
                    "state": Object {
                      "key": "id-1602772663650-0",
                      "routeName": "Discover",
                    },
                  }
                }
                numColumns={1}
                onContentSizeChange={[Function]}
                onEndReachedThreshold={0.7}
                onLayout={[Function]}
                onMomentumScrollEnd={[Function]}
                onRefresh={[Function]}
                onScroll={[Function]}
                onScrollBeginDrag={[Function]}
                onScrollEndDrag={[Function]}
                openUrl={[Function]}
                refreshControl={
                  <RefreshControlMock
                    onRefresh={[Function]}
                    refreshing={false}
                  />
                }
                refreshing={false}
                removeClippedSubviews={false}
                renderItem={[Function]}
                scrollEventThrottle={50}
                stickyHeaderIndices={Array []}
                updateCellsBatchingPeriod={50}
                viewabilityConfigCallbackPairs={Array []}
                windowSize={21}
              >
                <RCTRefreshControl />
                <View>
                  <View
                    style={
                      Object {
                        "backgroundColor": "#FFFFFF",
                        "borderRadius": 16,
                        "marginHorizontal": 16,
                        "marginVertical": 12,
                        "shadowColor": "rgba(0, 0, 0, 0.09999999999999998)",
                        "shadowOffset": Object {
                          "height": 2,
                          "width": 0,
                        },
                        "shadowOpacity": 1,
                        "shadowRadius": 8,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "borderRadius": 16,
                          "overflow": "hidden",
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "paddingHorizontal": 16,
                            "paddingVertical": 16,
                          }
                        }
                      >
                        <View
                          flexed={false}
                          style={
                            Object {
                              "alignItems": "center",
                              "flex": null,
                              "flexDirection": "row",
                              "tintColor": "#6EC5B8",
                            }
                          }
                        >
                          <RNSVGSvgView
                            align="xMidYMid"
                            bbHeight={19.2}
                            bbWidth={19.2}
                            focusable={false}
                            height={19.2}
                            meetOrSlice={0}
                            minX={0}
                            minY={0}
                            style={
                              Array [
                                Object {
                                  "backgroundColor": "transparent",
                                  "borderWidth": 0,
                                },
                                undefined,
                                Object {
                                  "opacity": 1,
                                },
                                Object {
                                  "flex": 0,
                                  "height": 19,
                                  "width": 19,
                                },
                              ]
                            }
                            vbHeight={24}
                            vbWidth={24}
                            width={19.2}
                          >
                            <RNSVGGroup
                              fill={
                                Array [
                                  0,
                                  4278190080,
                                ]
                              }
                              fillOpacity={1}
                              fillRule={1}
                              font={Object {}}
                              matrix={
                                Array [
                                  1,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                ]
                              }
                              opacity={1}
                              originX={0}
                              originY={0}
                              propList={Array []}
                              rotation={0}
                              scaleX={1}
                              scaleY={1}
                              skewX={0}
                              skewY={0}
                              stroke={null}
                              strokeDasharray={null}
                              strokeDashoffset={null}
                              strokeLinecap={0}
                              strokeLinejoin={0}
                              strokeMiterlimit={4}
                              strokeOpacity={1}
                              strokeWidth={1}
                              vectorEffect={0}
                              x={0}
                              y={0}
                            >
                              <RNSVGPath
                                d="M21.8955 19.741l-9.091-16.3178c-.3145-.5643-1.2945-.5643-1.609 0L2.1045 19.741c-.148.2662-.138.5865.0255.8433.1655.2585.46.4157.779.4157h18.182c.319 0 .6136-.1572.778-.4148.1647-.2577.1747-.578.0265-.8442zM12 18.4235c-.5018 0-.909-.3847-.909-.8588 0-.474.4072-.8588.909-.8588.502 0 .909.3845.909.8586 0 .474-.407.8588-.909.8588zm.909-3.4353h-1.818V8.9764h1.818v6.0118z"
                                fill={
                                  Array [
                                    0,
                                    4289045925,
                                  ]
                                }
                                fillOpacity={1}
                                fillRule={1}
                                matrix={
                                  Array [
                                    1,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                  ]
                                }
                                opacity={1}
                                originX={0}
                                originY={0}
                                propList={
                                  Array [
                                    "fill",
                                  ]
                                }
                                rotation={0}
                                scaleX={1}
                                scaleY={1}
                                skewX={0}
                                skewY={0}
                                stroke={null}
                                strokeDasharray={null}
                                strokeDashoffset={null}
                                strokeLinecap={0}
                                strokeLinejoin={0}
                                strokeMiterlimit={4}
                                strokeOpacity={1}
                                strokeWidth={1}
                                vectorEffect={0}
                                x={0}
                                y={0}
                              />
                            </RNSVGGroup>
                          </RNSVGSvgView>
                          <View
                            style={
                              Object {
                                "paddingHorizontal": 4,
                              }
                            }
                            withIcon="warning"
                          >
                            <Text
                              style={
                                Object {
                                  "color": "#A5A5A5",
                                  "fontFamily": "InterUI-Bold",
                                  "fontSize": 12,
                                  "lineHeight": 18,
                                }
                              }
                              tint="#A5A5A5"
                            >
                              Something went wrong
                            </Text>
                          </View>
                        </View>
                        <Text
                          style={
                            Object {
                              "color": "#505050",
                              "fontFamily": "InterUI-Bold",
                              "fontSize": 12,
                              "lineHeight": 18,
                            }
                          }
                        />
                        <Text
                          bold={false}
                          italic={false}
                          style={
                            Object {
                              "color": "#303030",
                              "fontFamily": "InterUI-Regular",
                              "fontSize": 16,
                              "lineHeight": 26,
                            }
                          }
                        >
                          Oh no! We're sorry! We logged your error and notified our team directly. In the mean time, please try again.
                        </Text>
                      </View>
                    </View>
                  </View>
                </View>
              </RCTScrollView>
            </View>
          </BVLinearGradient>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#fff",
            "transform": Array [
              Object {
                "translateX": -750,
              },
            ],
          }
        }
      >
        <RCTSafeAreaView
          emulateUnlessSupported={true}
          forceInset={
            Object {
              "bottom": "never",
              "horizontal": "always",
              "top": "always",
            }
          }
          style={
            Array [
              Object {
                "backgroundColor": "#fff",
                "borderBottomColor": "#a7a7aa",
                "borderBottomWidth": 0.5,
              },
              Object {
                "height": 44,
              },
              Object {},
            ]
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          />
        </RCTSafeAreaView>
      </View>
    </View>
  </View>
</View>
`;
